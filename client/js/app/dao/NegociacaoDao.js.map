{"version":3,"sources":["../../app-es6/dao/NegociacaoDao.js"],"names":["Negociacao","NegociacaoDao","connection","_connection","_store","negociacao","Promise","resolve","reject","request","transaction","objectStore","add","onsuccess","onerror","console","log","e","target","error","cursor","openCursor","negociacoes","atual","result","dado","value","push","_data","_quantidade","_valor","continue","clear"],"mappings":";;;;;;;;;;;;;;;AAASA,sB,qBAAAA,U;;;;;;;;;;;;;;;;;;;;;qCAGIC,a;AAET,uCAAYC,UAAZ,EAAwB;AAAA;;AAEpB,yBAAKC,WAAL,GAAmBD,UAAnB;AACA,yBAAKE,MAAL,GAAc,aAAd;AACH;;;;6CAEQC,U,EAAY;AAAA;;AAEjB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIC,UAAU,MACTN,WADS,CAETO,WAFS,CAEG,CAAC,MAAKN,MAAN,CAFH,EAEkB,WAFlB,EAGTO,WAHS,CAGG,MAAKP,MAHR,EAITQ,GAJS,CAILP,UAJK,CAAd;;AAMAI,oCAAQI,SAAR,GAAoB,aAAK;;AAErBN;AACH,6BAHD;;AAKAE,oCAAQK,OAAR,GAAkB,aAAK;;AAEnBC,wCAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB;AACAX,uCAAO,0CAAP;AACH,6BAJD;AAMH,yBAnBM,CAAP;AAoBH;;;iDAEY;AAAA;;AAET,+BAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEhC,gCAAIY,SAAS,OAAKjB,WAAL,CACRO,WADQ,CACI,CAAC,OAAKN,MAAN,CADJ,EACmB,WADnB,EAERO,WAFQ,CAEI,OAAKP,MAFT,EAGRiB,UAHQ,EAAb;;AAKA,gCAAIC,cAAc,EAAlB;;AAEAF,mCAAOP,SAAP,GAAmB,aAAK;;AAEpB,oCAAIU,QAAQN,EAAEC,MAAF,CAASM,MAArB;;AAEA,oCAAID,KAAJ,EAAW;;AAEP,wCAAIE,OAAOF,MAAMG,KAAjB;;AAEAJ,gDAAYK,IAAZ,CAAiB,IAAI3B,UAAJ,CACbyB,KAAKG,KADQ,EAEbH,KAAKI,WAFQ,EAGbJ,KAAKK,MAHQ,CAAjB;;AAKAP,0CAAMQ,QAAN;AACH,iCAVD,MAUO;;AAEHxB,4CAAQe,WAAR;AACH;;AAEDF,uCAAON,OAAP,GAAiB,aAAK;;AAElBC,4CAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB;AACAX,2CAAO,yCAAP;AACH,iCAJD;AAKH,6BAxBD;AA0BH,yBAnCE,CAAP;AAqCC;;;iDAEY;AAAA;;AAET,+BAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIC,UAAU,OAAKN,WAAL,CACTO,WADS,CACG,CAAC,OAAKN,MAAN,CADH,EACkB,WADlB,EAETO,WAFS,CAEG,OAAKP,MAFR,EAGT4B,KAHS,EAAd;;AAKAvB,oCAAQI,SAAR,GAAoB;AAAA,uCAAKN,QAAQ,oCAAR,CAAL;AAAA,6BAApB;;AAEAE,oCAAQK,OAAR,GAAkB,aAAK;;AAEnBC,wCAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB;AACAX,uCAAO,0CAAP;AACH,6BAJD;AAKH,yBAdM,CAAP;AAeH","file":"NegociacaoDao.js","sourcesContent":["import { Negociacao } from '../models/Negociacao';\r\n\r\n\r\nexport class NegociacaoDao {\r\n\r\n    constructor(connection) {\r\n\r\n        this._connection = connection;\r\n        this._store = 'negociacoes';\r\n    }\r\n\r\n    adiciona(negociacao) {\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            let request = this\r\n                ._connection\r\n                .transaction([this._store], 'readwrite')\r\n                .objectStore(this._store)\r\n                .add(negociacao);\r\n\r\n            request.onsuccess = e => {\r\n\r\n                resolve();\r\n            };\r\n\r\n            request.onerror = e => {\r\n\r\n                console.log(e.target.error);\r\n                reject('Não foi possível adicionar a negociação.');\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    listaTodos() {\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n                let cursor = this._connection\r\n                    .transaction([this._store], 'readwrite')\r\n                    .objectStore(this._store)\r\n                    .openCursor();\r\n\r\n                let negociacoes = [];\r\n\r\n                cursor.onsuccess = e => {\r\n\r\n                    let atual = e.target.result;\r\n\r\n                    if (atual) {\r\n\r\n                        let dado = atual.value;\r\n\r\n                        negociacoes.push(new Negociacao(\r\n                            dado._data,\r\n                            dado._quantidade,\r\n                            dado._valor));\r\n\r\n                        atual.continue();\r\n                    } else {\r\n\r\n                        resolve(negociacoes);\r\n                    }\r\n\r\n                    cursor.onerror = e => {\r\n\r\n                        console.log(e.target.error);\r\n                        reject('Não foi possível listar as negociações.');\r\n                    };\r\n                };\r\n\r\n            });\r\n\r\n        }\r\n\r\n        apagaTodos() {\r\n\r\n            return new Promise((resolve, reject) => {\r\n\r\n                let request = this._connection\r\n                    .transaction([this._store], 'readwrite')\r\n                    .objectStore(this._store)\r\n                    .clear();\r\n\r\n                request.onsuccess = e => resolve('Negociações removidas com sucesso.')\r\n                \r\n                request.onerror = e => {\r\n\r\n                    console.log(e.target.error);\r\n                    reject('Não foi possível remover as negociações.');\r\n                }\r\n            });\r\n        }\r\n}"]}