{"version":3,"sources":["../../app-es6/dao/NegociacaoDao.js"],"names":["NegociacaoDao","constructor","connection","_connection","_store","adiciona","negociacao","Promise","resolve","reject","request","transaction","objectStore","add","onsuccess","e","onerror","console","log","target","error","listaTodos","cursor","openCursor","negociacoes","atual","result","dado","value","push","Negociacao","_data","_quantidade","_valor","continue","apagaTodos","clear"],"mappings":";AACA,MAAMA,aAAN,CAAoB;;AAEhBC,gBAAYC,UAAZ,EAAwB;;AAEpB,aAAKC,WAAL,GAAmBD,UAAnB;AACA,aAAKE,MAAL,GAAc,aAAd;AACH;;AAEDC,aAASC,UAAT,EAAqB;;AAEjB,eAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;;AAEpC,gBAAIC,UAAU,KACTP,WADS,CAETQ,WAFS,CAEG,CAAC,KAAKP,MAAN,CAFH,EAEkB,WAFlB,EAGTQ,WAHS,CAGG,KAAKR,MAHR,EAITS,GAJS,CAILP,UAJK,CAAd;;AAMAI,oBAAQI,SAAR,GAAoBC,KAAK;;AAErBP;AACH,aAHD;;AAKAE,oBAAQM,OAAR,GAAkBD,KAAK;;AAEnBE,wBAAQC,GAAR,CAAYH,EAAEI,MAAF,CAASC,KAArB;AACAX,uBAAO,0CAAP;AACH,aAJD;AAMH,SAnBM,CAAP;AAoBH;;AAEDY,iBAAa;;AAET,eAAO,IAAId,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;;AAEhC,gBAAIa,SAAS,KAAKnB,WAAL,CACRQ,WADQ,CACI,CAAC,KAAKP,MAAN,CADJ,EACmB,WADnB,EAERQ,WAFQ,CAEI,KAAKR,MAFT,EAGRmB,UAHQ,EAAb;;AAKA,gBAAIC,cAAc,EAAlB;;AAEAF,mBAAOR,SAAP,GAAmBC,KAAK;;AAEpB,oBAAIU,QAAQV,EAAEI,MAAF,CAASO,MAArB;;AAEA,oBAAID,KAAJ,EAAW;;AAEP,wBAAIE,OAAOF,MAAMG,KAAjB;;AAEAJ,gCAAYK,IAAZ,CAAiB,IAAIC,UAAJ,CACbH,KAAKI,KADQ,EAEbJ,KAAKK,WAFQ,EAGbL,KAAKM,MAHQ,CAAjB;;AAKAR,0BAAMS,QAAN;AACH,iBAVD,MAUO;;AAEH1B,4BAAQgB,WAAR;AACH;;AAEDF,uBAAON,OAAP,GAAiBD,KAAK;;AAElBE,4BAAQC,GAAR,CAAYH,EAAEI,MAAF,CAASC,KAArB;AACAX,2BAAO,yCAAP;AACH,iBAJD;AAKH,aAxBD;AA0BH,SAnCE,CAAP;AAqCC;;AAED0B,iBAAa;;AAET,eAAO,IAAI5B,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;;AAEpC,gBAAIC,UAAU,KAAKP,WAAL,CACTQ,WADS,CACG,CAAC,KAAKP,MAAN,CADH,EACkB,WADlB,EAETQ,WAFS,CAEG,KAAKR,MAFR,EAGTgC,KAHS,EAAd;;AAKA1B,oBAAQI,SAAR,GAAoBC,KAAKP,QAAQ,oCAAR,CAAzB;;AAEAE,oBAAQM,OAAR,GAAkBD,KAAK;;AAEnBE,wBAAQC,GAAR,CAAYH,EAAEI,MAAF,CAASC,KAArB;AACAX,uBAAO,0CAAP;AACH,aAJD;AAKH,SAdM,CAAP;AAeH;AA1FW","file":"NegociacaoDao.js","sourcesContent":["\r\nclass NegociacaoDao {\r\n\r\n    constructor(connection) {\r\n\r\n        this._connection = connection;\r\n        this._store = 'negociacoes';\r\n    }\r\n\r\n    adiciona(negociacao) {\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            let request = this\r\n                ._connection\r\n                .transaction([this._store], 'readwrite')\r\n                .objectStore(this._store)\r\n                .add(negociacao);\r\n\r\n            request.onsuccess = e => {\r\n\r\n                resolve();\r\n            };\r\n\r\n            request.onerror = e => {\r\n\r\n                console.log(e.target.error);\r\n                reject('Não foi possível adicionar a negociação.');\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    listaTodos() {\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n                let cursor = this._connection\r\n                    .transaction([this._store], 'readwrite')\r\n                    .objectStore(this._store)\r\n                    .openCursor();\r\n\r\n                let negociacoes = [];\r\n\r\n                cursor.onsuccess = e => {\r\n\r\n                    let atual = e.target.result;\r\n\r\n                    if (atual) {\r\n\r\n                        let dado = atual.value;\r\n\r\n                        negociacoes.push(new Negociacao(\r\n                            dado._data,\r\n                            dado._quantidade,\r\n                            dado._valor));\r\n\r\n                        atual.continue();\r\n                    } else {\r\n\r\n                        resolve(negociacoes);\r\n                    }\r\n\r\n                    cursor.onerror = e => {\r\n\r\n                        console.log(e.target.error);\r\n                        reject('Não foi possível listar as negociações.');\r\n                    };\r\n                };\r\n\r\n            });\r\n\r\n        }\r\n\r\n        apagaTodos() {\r\n\r\n            return new Promise((resolve, reject) => {\r\n\r\n                let request = this._connection\r\n                    .transaction([this._store], 'readwrite')\r\n                    .objectStore(this._store)\r\n                    .clear();\r\n\r\n                request.onsuccess = e => resolve('Negociações removidas com sucesso.')\r\n                \r\n                request.onerror = e => {\r\n\r\n                    console.log(e.target.error);\r\n                    reject('Não foi possível remover as negociações.');\r\n                }\r\n            });\r\n        }\r\n}"]}