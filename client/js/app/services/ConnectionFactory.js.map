{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","constructor","Error","getConnection","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","e","_createStores","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","store","objectStoreNames","contains","deleteObjectStore","createObjectStore","autoIncrement","closeConnection"],"mappings":";AACA,MAAMA,SAAS,CAAC,aAAD,CAAf;AACA,MAAMC,UAAU,CAAhB;AACA,MAAMC,SAAS,YAAf;;AAEA,IAAIC,aAAa,IAAjB;AACA,IAAIC,QAAQ,IAAZ;;AAEA,OAAO,MAAMC,iBAAN,CAAwB;;AAEvBC,kBAAc;;AAEV,cAAMC,MAAM,wDAAN,CAAN;AACH;;AAED,WAAOC,aAAP,GAAuB;;AAEnB,eAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;;AAEpC,gBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBb,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAW,wBAAYI,eAAZ,GAA8BC,KAAK;;AAE/BZ,kCAAkBa,aAAlB,CAAgCD,EAAEE,MAAF,CAASC,MAAzC;AACH,aAHD;;AAKAR,wBAAYS,SAAZ,GAAwBJ,KAAM;;AAE1B,oBAAI,CAACd,UAAL,EAAiB;;AAEbA,iCAAac,EAAEE,MAAF,CAASC,MAAtB;AACAhB,4BAAQD,WAAWC,KAAX,CAAiBkB,IAAjB,CAAsBnB,UAAtB,CAAR;AACAA,+BAAWC,KAAX,GAAmB,YAAW;AAC1B,8BAAM,IAAIG,KAAJ,CAAU,+CAAV,CAAN;AACH,qBAFD;AAGH;;AAEDG,wBAAQP,UAAR;AACH,aAZD;;AAcAS,wBAAYW,OAAZ,GAAsBN,KAAK;;AAEvBO,wBAAQC,GAAR,CAAYR,EAAEE,MAAF,CAASO,KAArB;;AAEAf,uBAAOM,EAAEE,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,aALD;AAMH,SA7BM,CAAP;AA8BH;;AAED,WAAOT,aAAP,CAAqBf,UAArB,EAAiC;;AAE7BH,eAAO4B,OAAP,CAAeC,SAAS;;AAEpB,gBAAI1B,WAAW2B,gBAAX,CAA4BC,QAA5B,CAAqCF,KAArC,CAAJ,EACI1B,WAAW6B,iBAAX,CAA6BH,KAA7B;;AAEJ1B,uBAAW8B,iBAAX,CAA6BJ,KAA7B,EAAoC,EAAEK,eAAe,IAAjB,EAApC;AACH,SAND;AAOH;;AAED,WAAOC,eAAP,GAAyB;;AAErB,YAAIhC,UAAJ,EAAgB;;AAEZC;AACAD,yBAAa,IAAb;AACH;AACJ;AA3DsB","file":"ConnectionFactory.js","sourcesContent":["\r\nconst stores = ['negociacoes'];\r\nconst version = 4;\r\nconst dbName = 'aluraframe';\r\n\r\nlet connection = null;\r\nlet close = null;\r\n\r\nexport class ConnectionFactory {\r\n\r\n        constructor() {\r\n    \r\n            throw Error('Não é permitido criar instâncias de ConnectionFactory.')\r\n        }\r\n    \r\n        static getConnection() {\r\n    \r\n            return new Promise((resolve, reject) => {\r\n    \r\n                let openRequest = window.indexedDB.open(dbName, version);\r\n    \r\n                openRequest.onupgradeneeded = e => {\r\n    \r\n                    ConnectionFactory._createStores(e.target.result);\r\n                };\r\n    \r\n                openRequest.onsuccess = e =>  {\r\n                    \r\n                    if (!connection) {\r\n\r\n                        connection = e.target.result;\r\n                        close = connection.close.bind(connection);\r\n                        connection.close = function() {\r\n                            throw new Error(\"Não é permitido fechar a conexão diretamente.\");\r\n                        };\r\n                    }\r\n\r\n                    resolve(connection);\r\n                };\r\n    \r\n                openRequest.onerror = e => {\r\n    \r\n                    console.log(e.target.error);\r\n    \r\n                    reject(e.target.error.name);\r\n                };\r\n            });\r\n        }\r\n    \r\n        static _createStores(connection) {\r\n    \r\n            stores.forEach(store => {\r\n    \r\n                if (connection.objectStoreNames.contains(store))\r\n                    connection.deleteObjectStore(store);\r\n                \r\n                connection.createObjectStore(store, { autoIncrement: true });\r\n            });\r\n        }\r\n\r\n        static closeConnection() {\r\n\r\n            if (connection) {\r\n\r\n                close();\r\n                connection = null;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n"]}