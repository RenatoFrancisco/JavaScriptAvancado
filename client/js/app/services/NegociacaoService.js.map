{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["HttpService","ConnectionFactory","NegociacaoDao","Negociacao","NegociacaoService","_http","Promise","resolve","reject","get","then","console","log","negociacoes","map","Date","objeto","data","quantidade","valor","catch","erro","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","periodos","reduce","dados","periodo","concat","dado","negociacao","getConnection","connection","dao","adiciona","Error","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","JSON","stringify","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["import {HttpService} from './HttpService';\r\nimport {ConnectionFactory} from './ConnectionFactory';\r\nimport {NegociacaoDao} from '../dao/NegociacaoDao';\r\nimport {Negociacao} from '../models/Negociacao';\r\n\r\nexport class NegociacaoService {\r\n    \r\n    constructor() {\r\n        \r\n        this._http = new HttpService();\r\n    }\r\n    \r\n    obterNegociacoesDaSemana() {\r\n       \r\n       return new Promise((resolve, reject) => {\r\n        \r\n            this._http\r\n                .get('negociacoes/semana')\r\n                .then(negociacoes => {\r\n                    console.log(negociacoes);\r\n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\r\n                })\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    reject('Não foi possível obter as negociações da semana');\r\n                });  \r\n       });        \r\n    }\r\n    \r\n    obterNegociacoesDaSemanaAnterior() {\r\n       \r\n       return new Promise((resolve, reject) => {\r\n        \r\n            this._http\r\n                .get('negociacoes/anterior')\r\n                .then(negociacoes => {\r\n                    console.log(negociacoes);\r\n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\r\n                })\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    reject('Não foi possível obter as negociações da semana anterior');\r\n                });  \r\n       }); \r\n       \r\n        \r\n    }\r\n    \r\n    obterNegociacoesDaSemanaRetrasada() {\r\n       \r\n       return new Promise((resolve, reject) => {\r\n        \r\n            this._http\r\n                .get('negociacoes/retrasada')\r\n                .then(negociacoes => {\r\n                    console.log(negociacoes);\r\n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\r\n                })\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    reject('Não foi possível obter as negociações da semana retrasada');\r\n                });  \r\n       }); \r\n    }    \r\n    \r\n    \r\n    obterNegociacoes() {\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            Promise.all([\r\n                this.obterNegociacoesDaSemana(),\r\n                this.obterNegociacoesDaSemanaAnterior(),\r\n                this.obterNegociacoesDaSemanaRetrasada()\r\n            ]).then(periodos => {\r\n\r\n                let negociacoes = periodos\r\n                    .reduce((dados, periodo) => dados.concat(periodo), [])\r\n                    .map(dado => new Negociacao(new Date(dado.data), dado.quantidade, dado.valor ));\r\n\r\n                resolve(negociacoes);\r\n\r\n            }).catch(erro => reject(erro));\r\n        });\r\n    }\r\n    \r\n    cadastra(negociacao) {\r\n\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.adiciona(negociacao))\r\n            .then(() => 'Negociacao cadastrada com sucesso')\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível adicionar a negociação');        \r\n            });\r\n    }\r\n\r\n    lista() {\r\n\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.listaTodos())\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível obter as negociações');\r\n            });\r\n    }\r\n\r\n    apaga() {\r\n\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.apagaTodos())\r\n            .then(() => 'Negociações apagadas com sucesso')\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível apagar as negociações');\r\n            });\r\n    }\r\n\r\n    importa(listaAtual) {\r\n\r\n        return this.obterNegociacoes()\r\n            .then(negociacoes => \r\n                negociacoes.filter(negociacao => \r\n                    !listaAtual.some(negociacaoExistente =>\r\n                        JSON.stringify(negociacao) == JSON.stringify(negociacaoExistente)))\r\n            )\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível importar as negociações');\r\n            });\r\n    }\r\n}\r\n\r\n"]}