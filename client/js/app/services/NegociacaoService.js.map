{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["HttpService","ConnectionFactory","NegociacaoDao","NegociacaoService","constructor","_http","obterNegociacoesDaSemana","Promise","resolve","reject","get","then","negociacoes","console","log","map","objeto","Negociacao","Date","data","quantidade","valor","catch","erro","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","obterNegociacoes","all","periodos","reduce","dados","periodo","concat","dado","cadastra","negociacao","getConnection","connection","dao","adiciona","Error","lista","listaTodos","apaga","apagaTodos","importa","listaAtual","filter","some","negociacaoExistente","JSON","stringify"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["import {HttpService} from './HttpService';\r\nimport {ConnectionFactory} from './ConnectionFactory';\r\nimport {NegociacaoDao} from '../dao/NegociacaoDao';\r\n\r\nexport class NegociacaoService {\r\n    \r\n    constructor() {\r\n        \r\n        this._http = new HttpService();\r\n    }\r\n    \r\n    obterNegociacoesDaSemana() {\r\n       \r\n       return new Promise((resolve, reject) => {\r\n        \r\n            this._http\r\n                .get('negociacoes/semana')\r\n                .then(negociacoes => {\r\n                    console.log(negociacoes);\r\n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\r\n                })\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    reject('Não foi possível obter as negociações da semana');\r\n                });  \r\n       });        \r\n    }\r\n    \r\n    obterNegociacoesDaSemanaAnterior() {\r\n       \r\n       return new Promise((resolve, reject) => {\r\n        \r\n            this._http\r\n                .get('negociacoes/anterior')\r\n                .then(negociacoes => {\r\n                    console.log(negociacoes);\r\n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\r\n                })\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    reject('Não foi possível obter as negociações da semana anterior');\r\n                });  \r\n       }); \r\n       \r\n        \r\n    }\r\n    \r\n    obterNegociacoesDaSemanaRetrasada() {\r\n       \r\n       return new Promise((resolve, reject) => {\r\n        \r\n            this._http\r\n                .get('negociacoes/retrasada')\r\n                .then(negociacoes => {\r\n                    console.log(negociacoes);\r\n                    resolve(negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\r\n                })\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    reject('Não foi possível obter as negociações da semana retrasada');\r\n                });  \r\n       }); \r\n    }    \r\n    \r\n    \r\n    obterNegociacoes() {\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            Promise.all([\r\n                this.obterNegociacoesDaSemana(),\r\n                this.obterNegociacoesDaSemanaAnterior(),\r\n                this.obterNegociacoesDaSemanaRetrasada()\r\n            ]).then(periodos => {\r\n\r\n                let negociacoes = periodos\r\n                    .reduce((dados, periodo) => dados.concat(periodo), [])\r\n                    .map(dado => new Negociacao(new Date(dado.data), dado.quantidade, dado.valor ));\r\n\r\n                resolve(negociacoes);\r\n\r\n            }).catch(erro => reject(erro));\r\n        });\r\n    }\r\n    \r\n    cadastra(negociacao) {\r\n\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.adiciona(negociacao))\r\n            .then(() => 'Negociacao cadastrada com sucesso')\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível adicionar a negociação');        \r\n            });\r\n    }\r\n\r\n    lista() {\r\n\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.listaTodos())\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível obter as negociações');\r\n            });\r\n    }\r\n\r\n    apaga() {\r\n\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.apagaTodos())\r\n            .then(() => 'Negociações apagadas com sucesso')\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível apagar as negociações');\r\n            });\r\n    }\r\n\r\n    importa(listaAtual) {\r\n\r\n        return this.obterNegociacoes()\r\n            .then(negociacoes => \r\n                negociacoes.filter(negociacao => \r\n                    !listaAtual.some(negociacaoExistente =>\r\n                        JSON.stringify(negociacao) == JSON.stringify(negociacaoExistente)))\r\n            )\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível importar as negociações');\r\n            });\r\n    }\r\n}\r\n\r\n"]}